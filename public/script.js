// ========== ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ==========
const ARDUINO_IP = 'http://192.168.1.100'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô IP ‡∏Ç‡∏≠‡∏á Arduino R4 WiFi
const FETCH_INTERVAL = 5000; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
const WEATHER_API_KEY = '7a89a85eb89b0c2793a803bf19d476f4'; // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ OpenWeatherMap (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Open-Meteo)

// ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡∏£‡∏≠ GPS)
let currentLocation = null;

let useCurrentLocation = false; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
let weatherUpdateInterval;
let sensorUpdateInterval;

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ ==========
function updateDateTime() {
  const now = new Date();
  const options = { 
    weekday: 'short', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    hour12: true
  };
  
  const formatted = now.toLocaleString('en-US', options);
  const parts = formatted.split(', ');
  const datePart = parts.slice(0, -1).join(', ');
  const timePart = parts[parts.length - 1];
  
  document.getElementById('datetime').textContent = `${datePart} | ${timePart}`;
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Wi-Fi Status ==========
function updateWifiStatus(isConnected) {
  const wifiStatus = document.getElementById('wifi-status');
  if (wifiStatus) {
    if (isConnected) {
      wifiStatus.innerHTML = 'üü¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß';
      wifiStatus.className = 'wifi-status';
    } else {
      wifiStatus.innerHTML = 'üî¥ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
      wifiStatus.className = 'wifi-status disconnected';
    }
  }
}

// ========== ‡πÅ‡∏õ‡∏•‡∏á Weather Code ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô ==========
function getWeatherIcon(code) {
  const weatherMap = {
    0: { icon: '‚òÄÔ∏è', text: '‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™' },
    1: { icon: 'üå§Ô∏è', text: '‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà' },
    2: { icon: '‚õÖ', text: '‡πÄ‡∏°‡∏Ü‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô' },
    3: { icon: '‚òÅÔ∏è', text: '‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å' },
    45: { icon: 'üå´Ô∏è', text: '‡∏°‡∏µ‡∏´‡∏°‡∏≠‡∏Å' },
    48: { icon: 'üå´Ô∏è', text: '‡∏°‡∏µ‡∏´‡∏°‡∏≠‡∏Å‡∏•‡∏á‡∏ô‡πâ‡∏≥‡∏Ñ‡πâ‡∏≤‡∏á' },
    51: { icon: 'üå¶Ô∏è', text: '‡∏ù‡∏ô‡∏õ‡∏£‡∏≠‡∏¢‡πÜ' },
    53: { icon: 'üå¶Ô∏è', text: '‡∏ù‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' },
    55: { icon: 'üåßÔ∏è', text: '‡∏ù‡∏ô‡∏´‡∏ô‡∏±‡∏Å' },
    61: { icon: 'üåßÔ∏è', text: '‡∏ù‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢' },
    63: { icon: 'üåßÔ∏è', text: '‡∏ù‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' },
    65: { icon: '‚õàÔ∏è', text: '‡∏ù‡∏ô‡∏´‡∏ô‡∏±‡∏Å' },
    71: { icon: 'üå®Ô∏è', text: '‡∏´‡∏¥‡∏°‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢' },
    73: { icon: 'üå®Ô∏è', text: '‡∏´‡∏¥‡∏°‡∏∞‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' },
    75: { icon: '‚ùÑÔ∏è', text: '‡∏´‡∏¥‡∏°‡∏∞‡∏´‡∏ô‡∏±‡∏Å' },
    77: { icon: 'üå®Ô∏è', text: '‡∏•‡∏π‡∏Å‡πÄ‡∏´‡πá‡∏ö' },
    80: { icon: 'üå¶Ô∏è', text: '‡∏ù‡∏ô‡∏ï‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πà‡∏ß‡∏á' },
    81: { icon: '‚õàÔ∏è', text: '‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å' },
    82: { icon: '‚õàÔ∏è', text: '‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å' },
    85: { icon: 'üå®Ô∏è', text: '‡∏´‡∏¥‡∏°‡∏∞‡∏ï‡∏Å' },
    86: { icon: '‚ùÑÔ∏è', text: '‡∏´‡∏¥‡∏°‡∏∞‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å' },
    95: { icon: '‚õàÔ∏è', text: '‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á' },
    96: { icon: '‚õàÔ∏è', text: '‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏π‡∏Å‡πÄ‡∏´‡πá‡∏ö' },
    99: { icon: '‚õàÔ∏è', text: '‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á' }
  };
  
  return weatherMap[code] || { icon: 'üå°Ô∏è', text: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®' };
}

// ========== ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å Latitude/Longitude ==========
async function getLocationName(lat, lon) {
  try {
    const response = await fetch(
      `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&accept-language=th`
    );
    const data = await response.json();
    
    if (data.address) {
      const city = data.address.city || data.address.town || data.address.village || '';
      const country = data.address.country || '';
      return city && country ? `${city}, ${country}` : data.display_name.split(',').slice(0, 2).join(',');
    }
    return `${lat.toFixed(4)}, ${lon.toFixed(4)}`;
  } catch (error) {
    console.error('Error fetching location name:', error);
    return `${lat.toFixed(4)}, ${lon.toFixed(4)}`;
  }
}

// ========== ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å Open-Meteo API ==========
async function fetchWeatherData() {
  const weatherLocation = document.getElementById('weather-location');
  weatherLocation.innerHTML = '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...';
  
  try {
    const { lat, lon } = currentLocation;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å Open-Meteo (‡∏ü‡∏£‡∏µ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á API Key)
    const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,relative_humidity_2m,weather_code,wind_speed_10m&daily=temperature_2m_max,temperature_2m_min&timezone=auto`;
    
    const response = await fetch(weatherUrl);
    
    if (!response.ok) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ');
    }
    
    const data = await response.json();
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    const locationName = await getLocationName(lat, lon);
    weatherLocation.innerHTML = `üìç ${locationName}`;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    const current = data.current;
    const daily = data.daily;
    
    document.getElementById('current-temp').textContent = `${Math.round(current.temperature_2m)}¬∞C`;
    
    const weather = getWeatherIcon(current.weather_code);
    document.getElementById('weather-condition').innerHTML = `${weather.icon} ${weather.text}`;
    
    document.getElementById('temp-high').textContent = `${Math.round(daily.temperature_2m_max[0])}¬∞C`;
    document.getElementById('temp-low').textContent = `${Math.round(daily.temperature_2m_min[0])}¬∞C`;
    
    document.getElementById('weather-wind').textContent = `${current.wind_speed_10m} m/s`;
    document.getElementById('weather-humidity').textContent = `${current.relative_humidity_2m}%`;
    
    console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
  } catch (error) {
    console.error('Weather fetch error:', error);
    weatherLocation.innerHTML = '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ';
    document.getElementById('weather-condition').innerHTML = '‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
  }
}

// ========== ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ==========
async function requestGeolocation() {
  const btn = document.getElementById('use-current-location-btn');
  btn.textContent = '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå...';
  btn.disabled = true;

  if (!navigator.geolocation) {
    alert('‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á');
    btn.textContent = '‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö';
    return;
  }

  navigator.geolocation.getCurrentPosition(
    async (position) => {
      currentLocation = {
        lat: position.coords.latitude,
        lon: position.coords.longitude
      };
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï input fields
      document.getElementById('manual-lat').value = currentLocation.lat.toFixed(4);
      document.getElementById('manual-lon').value = currentLocation.lon.toFixed(4);
      
      btn.textContent = '‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô';
      btn.style.background = 'rgba(76, 175, 80, 0.3)';
      btn.disabled = false;
      
      useCurrentLocation = true;
      await fetchWeatherData();
    },
    (error) => {
      console.error('Geolocation error:', error);
      let errorMsg = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ';
      
      switch(error.code) {
        case error.PERMISSION_DENIED:
          errorMsg = '‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á';
          break;
        case error.POSITION_UNAVAILABLE:
          errorMsg = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ';
          break;
        case error.TIMEOUT:
          errorMsg = '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤';
          break;
      }
      
      alert(errorMsg);
      btn.textContent = 'üìç ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
      btn.disabled = false;
    }
  );
}

// ========== ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á ==========
async function pinCustomLocation() {
  const latInput = document.getElementById('manual-lat');
  const lonInput = document.getElementById('manual-lon');
  
  const lat = parseFloat(latInput.value);
  const lon = parseFloat(lonInput.value);
  
  if (isNaN(lat) || isNaN(lon)) {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Latitude ‡πÅ‡∏•‡∏∞ Longitude ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    return;
  }
  
  if (lat < -90 || lat > 90) {
    alert('Latitude ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á -90 ‡∏ñ‡∏∂‡∏á 90');
    return;
  }
  
  if (lon < -180 || lon > 180) {
    alert('Longitude ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á -180 ‡∏ñ‡∏∂‡∏á 180');
    return;
  }
  
  currentLocation = { lat, lon };
  useCurrentLocation = false;
  
  const btn = document.getElementById('use-current-location-btn');
  btn.textContent = 'üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô';
  btn.style.background = 'rgba(255, 255, 255, 0.2)';
  
  await fetchWeatherData();
}

// ========== ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å Arduino ==========
async function fetchSensorData() {
  try {
    const response = await fetch(`${ARDUINO_IP}/sensors`, {
      method: 'GET',
      mode: 'cors',
      headers: {
        'Accept': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÑ‡∏î‡πâ');
    }
    
    const data = await response.json();
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ pH
    if (data.ph !== undefined) {
      document.getElementById('ph-value').textContent = data.ph.toFixed(2);
      const phStatus = getPhStatus(data.ph);
      document.getElementById('ph-status').innerHTML = phStatus;
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ EC
    if (data.ec !== undefined) {
      document.getElementById('ec-value').innerHTML = `${data.ec.toFixed(2)}<span class="sensor-unit">mS/cm</span>`;
      const ecStatus = getEcStatus(data.ec);
      document.getElementById('ec-status').innerHTML = ecStatus;
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô
    if (data.humidity !== undefined) {
      document.getElementById('humidity-value').innerHTML = `${Math.round(data.humidity)}<span class="sensor-unit">%</span>`;
      const humidityStatus = getHumidityStatus(data.humidity);
      document.getElementById('humidity-status').innerHTML = humidityStatus;
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ô‡πâ‡∏≥
    if (data.waterTemp !== undefined) {
      document.getElementById('water-temp-value').innerHTML = `${data.waterTemp.toFixed(1)}<span class="sensor-unit">¬∞C</span>`;
      const waterTempStatus = getWaterTempStatus(data.waterTemp);
      document.getElementById('water-temp-status').innerHTML = waterTempStatus;
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á
    if (data.light !== undefined) {
      document.getElementById('light-value').innerHTML = `${Math.round(data.light)}<span class="sensor-unit">lux</span>`;
      const lightStatus = getLightStatus(data.light);
      document.getElementById('light-status').innerHTML = lightStatus;
    }
    
    updateWifiStatus(true);
    console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data);
    
  } catch (error) {
    console.error('Sensor fetch error:', error);
    updateWifiStatus(false);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    document.getElementById('ph-status').innerHTML = '‚è≥ ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    document.getElementById('ec-status').innerHTML = '‚è≥ ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    document.getElementById('humidity-status').innerHTML = '‚è≥ ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    document.getElementById('water-temp-status').innerHTML = '‚è≥ ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    document.getElementById('light-status').innerHTML = '‚è≥ ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
  }
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ==========
function getPhStatus(ph) {
  if (ph < 5.5) return '‚ö†Ô∏è ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  if (ph > 6.5) return '‚ö†Ô∏è ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  return '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥';
}

function getEcStatus(ec) {
  if (ec < 1.2) return '‚ö†Ô∏è ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  if (ec > 2.5) return '‚ö†Ô∏è ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  return '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥';
}

function getHumidityStatus(humidity) {
  if (humidity < 50) return '‚ö†Ô∏è ‡πÅ‡∏´‡πâ‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  if (humidity > 80) return '‚ö†Ô∏è ‡∏ä‡∏∑‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  return '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥';
}

function getWaterTempStatus(temp) {
  if (temp < 18) return '‚ö†Ô∏è ‡πÄ‡∏¢‡πá‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  if (temp > 26) return '‚ö†Ô∏è ‡∏£‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  return '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥';
}

function getLightStatus(light) {
  if (light < 10000) return '‚ö†Ô∏è ‡πÅ‡∏™‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  if (light > 50000) return '‚ö†Ô∏è ‡πÅ‡∏™‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  return '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥';
}

// ========== ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Garden Info ‡∏à‡∏≤‡∏Å Dropdown ==========
function handleLocationChange(event) {
  const value = event.target.value;
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ß‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
  switch(value) {
    case 'bangkok':
      document.getElementById('garden-name-display').textContent = 'Spinach Garden 08';
      document.getElementById('garden-plot-id').textContent = 'PL-024';
      document.getElementById('garden-area').textContent = '200 m¬≤';
      break;
    case 'weilburg':
      document.getElementById('garden-name-display').textContent = 'Weilburg Farm';
      document.getElementById('garden-plot-id').textContent = 'WB-001';
      document.getElementById('garden-area').textContent = '350 m¬≤';
      break;
    case 'farm_a':
      document.getElementById('garden-name-display').textContent = 'Farm A Chiangmai';
      document.getElementById('garden-plot-id').textContent = 'CM-A12';
      document.getElementById('garden-area').textContent = '500 m¬≤';
      break;
  }
  
  // ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® - ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
}

// ========== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ==========
function init() {
  console.log('üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö I-HYDRO SMART...');
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  updateDateTime();
  setInterval(updateDateTime, 1000);
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  fetchWeatherData();
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  fetchSensorData();
  
  // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  weatherUpdateInterval = setInterval(fetchWeatherData, 60000); // ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
  sensorUpdateInterval = setInterval(fetchSensorData, FETCH_INTERVAL); // ‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  
  // Event Listeners
  document.getElementById('use-current-location-btn').addEventListener('click', requestGeolocation);
  document.getElementById('pin-location-btn').addEventListener('click', pinCustomLocation);
  document.getElementById('garden-location').addEventListener('change', handleLocationChange);
  
  // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï currentLocation ‡πÅ‡∏ö‡∏ö realtime ‡∏à‡∏≤‡∏Å input
  // ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  
  console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}

// ========== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ==========
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', init);
} else {
  init();
}

// ========== ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ==========
window.addEventListener('beforeunload', () => {
  if (weatherUpdateInterval) clearInterval(weatherUpdateInterval);
  if (sensorUpdateInterval) clearInterval(sensorUpdateInterval);
});