// ========== ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ==========
const ARDUINO_IP = 'http://192.168.1.100'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô IP ‡∏Ç‡∏≠‡∏á Arduino R4 WiFi
const FETCH_INTERVAL = 5000; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
const WEATHER_API_KEY = '7a89a85eb89b0c2793a803bf19d476f4'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenWeatherMap (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Å‡πá‡πÑ‡∏î‡πâ)

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
let currentLocation = null;
let useGPSMode = true; // ‡πÇ‡∏´‡∏°‡∏î GPS ‡∏´‡∏£‡∏∑‡∏≠ Manual
let weatherUpdateInterval;
let sensorUpdateInterval;
let gpsUpdateInterval;
let cameraStream = null;
let isCameraActive = false;

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ ==========
function updateDateTime() {
  const now = new Date();
  const options = { 
    weekday: 'short', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    hour12: true
  };
  
  const formatted = now.toLocaleString('en-US', options);
  const parts = formatted.split(', ');
  const datePart = parts.slice(0, -1).join(', ');
  const timePart = parts[parts.length - 1];
  
  const datetimeEl = document.getElementById('datetime');
  if (datetimeEl) {
    datetimeEl.textContent = `${datePart} | ${timePart}`;
  }
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Wi-Fi Status ==========
function updateWifiStatus(isConnected) {
  const wifiStatus = document.getElementById('wifi-status');
  if (wifiStatus) {
    if (isConnected) {
      wifiStatus.innerHTML = 'üü¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß';
      wifiStatus.className = 'wifi-status';
    } else {
      wifiStatus.innerHTML = 'üî¥ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
      wifiStatus.className = 'wifi-status disconnected';
    }
  }
}

// ========== ‡πÅ‡∏õ‡∏•‡∏á Weather Code ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô ==========
function getWeatherIcon(code) {
  const weatherMap = {
    0: { icon: '‚òÄÔ∏è', text: '‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™' },
    1: { icon: 'üå§Ô∏è', text: '‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà' },
    2: { icon: '‚õÖ', text: '‡πÄ‡∏°‡∏Ü‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô' },
    3: { icon: '‚òÅÔ∏è', text: '‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å' },
    45: { icon: 'üå´Ô∏è', text: '‡∏°‡∏µ‡∏´‡∏°‡∏≠‡∏Å' },
    48: { icon: 'üå´Ô∏è', text: '‡∏°‡∏µ‡∏´‡∏°‡∏≠‡∏Å‡∏•‡∏á‡∏ô‡πâ‡∏≥‡∏Ñ‡πâ‡∏≤‡∏á' },
    51: { icon: 'üå¶Ô∏è', text: '‡∏ù‡∏ô‡∏õ‡∏£‡∏≠‡∏¢‡πÜ' },
    53: { icon: 'üå¶Ô∏è', text: '‡∏ù‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' },
    55: { icon: 'üåßÔ∏è', text: '‡∏ù‡∏ô‡∏´‡∏ô‡∏±‡∏Å' },
    61: { icon: 'üåßÔ∏è', text: '‡∏ù‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢' },
    63: { icon: 'üåßÔ∏è', text: '‡∏ù‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' },
    65: { icon: '‚õàÔ∏è', text: '‡∏ù‡∏ô‡∏´‡∏ô‡∏±‡∏Å' },
    71: { icon: 'üå®Ô∏è', text: '‡∏´‡∏¥‡∏°‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢' },
    73: { icon: 'üå®Ô∏è', text: '‡∏´‡∏¥‡∏°‡∏∞‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' },
    75: { icon: '‚ùÑÔ∏è', text: '‡∏´‡∏¥‡∏°‡∏∞‡∏´‡∏ô‡∏±‡∏Å' },
    77: { icon: 'üå®Ô∏è', text: '‡∏•‡∏π‡∏Å‡πÄ‡∏´‡πá‡∏ö' },
    80: { icon: 'üå¶Ô∏è', text: '‡∏ù‡∏ô‡∏ï‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πà‡∏ß‡∏á' },
    81: { icon: '‚õàÔ∏è', text: '‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å' },
    82: { icon: '‚õàÔ∏è', text: '‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å' },
    85: { icon: 'üå®Ô∏è', text: '‡∏´‡∏¥‡∏°‡∏∞‡∏ï‡∏Å' },
    86: { icon: '‚ùÑÔ∏è', text: '‡∏´‡∏¥‡∏°‡∏∞‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å' },
    95: { icon: '‚õàÔ∏è', text: '‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á' },
    96: { icon: '‚õàÔ∏è', text: '‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏π‡∏Å‡πÄ‡∏´‡πá‡∏ö' },
    99: { icon: '‚õàÔ∏è', text: '‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á' }
  };
  
  return weatherMap[code] || { icon: 'üå°Ô∏è', text: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®' };
}

// ========== ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å Latitude/Longitude ==========
async function getLocationName(lat, lon) {
  try {
    const response = await fetch(
      `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&accept-language=th`
    );
    const data = await response.json();
    
    if (data.address) {
      const city = data.address.city || data.address.town || data.address.village || '';
      const country = data.address.country || '';
      return city && country ? `${city}, ${country}` : data.display_name.split(',').slice(0, 2).join(',');
    }
    return `${lat.toFixed(4)}, ${lon.toFixed(4)}`;
  } catch (error) {
    console.error('Error fetching location name:', error);
    return `${lat.toFixed(4)}, ${lon.toFixed(4)}`;
  }
}

// ========== ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å Open-Meteo API ==========
async function fetchWeatherData() {
  const weatherLocation = document.getElementById('weather-location');
  if (!weatherLocation) return;
  
  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Bangkok)
  if (!currentLocation) {
    currentLocation = {
      lat: 13.7563,
      lon: 100.5018
    };
  }
  
  weatherLocation.innerHTML = '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...';
  
  try {
    const { lat, lon } = currentLocation;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å Open-Meteo (‡∏ü‡∏£‡∏µ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á API Key)
    const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,relative_humidity_2m,weather_code,wind_speed_10m&daily=temperature_2m_max,temperature_2m_min&timezone=auto`;
    
    const response = await fetch(weatherUrl);
    
    if (!response.ok) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ');
    }
    
    const data = await response.json();
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    const locationName = await getLocationName(lat, lon);
    weatherLocation.innerHTML = `üìç ${locationName}`;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    const current = data.current;
    const daily = data.daily;
    
    const currentTempEl = document.getElementById('current-temp');
    if (currentTempEl) {
      currentTempEl.textContent = `${Math.round(current.temperature_2m)}¬∞C`;
    }
    
    const weather = getWeatherIcon(current.weather_code);
    const weatherConditionEl = document.getElementById('weather-condition');
    if (weatherConditionEl) {
      weatherConditionEl.innerHTML = `${weather.icon} ${weather.text}`;
    }
    
    const tempHighEl = document.getElementById('temp-high');
    const tempLowEl = document.getElementById('temp-low');
    if (tempHighEl && tempLowEl) {
      tempHighEl.textContent = `${Math.round(daily.temperature_2m_max[0])}¬∞C`;
      tempLowEl.textContent = `${Math.round(daily.temperature_2m_min[0])}¬∞C`;
    }
    
    const weatherWindEl = document.getElementById('weather-wind');
    const weatherHumidityEl = document.getElementById('weather-humidity');
    if (weatherWindEl) {
      weatherWindEl.textContent = `${current.wind_speed_10m} m/s`;
    }
    if (weatherHumidityEl) {
      weatherHumidityEl.textContent = `${current.relative_humidity_2m}%`;
    }
    
    console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
  } catch (error) {
    console.error('Weather fetch error:', error);
    weatherLocation.innerHTML = '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ';
    const weatherConditionEl = document.getElementById('weather-condition');
    if (weatherConditionEl) {
      weatherConditionEl.innerHTML = '‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
    }
  }
}

// ========== ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥) ==========
async function requestGeolocation() {
  if (!navigator.geolocation) {
    console.error('‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á');
    return;
  }

  navigator.geolocation.getCurrentPosition(
    async (position) => {
      currentLocation = {
        lat: position.coords.latitude,
        lon: position.coords.longitude
      };
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      saveLastLocation(currentLocation.lat, currentLocation.lon);
      
      useCurrentLocation = true;
      await fetchWeatherData();
      
      console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    },
    (error) => {
      console.error('Geolocation error:', error);
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå GPS ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    },
    {
      enableHighAccuracy: true,
      timeout: 10000,
      maximumAge: 0
    }
  );
}

// ========== ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å Arduino (Mock Data) ==========
async function fetchSensorData() {
  try {
    // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Arduino ‡∏à‡∏£‡∏¥‡∏á
    const response = await fetch(`${ARDUINO_IP}/sensors`, {
      method: 'GET',
      mode: 'cors',
      headers: {
        'Accept': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÑ‡∏î‡πâ');
    }
    
    const data = await response.json();
    updateSensorDisplay(data);
    updateWifiStatus(true);
    
  } catch (error) {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
    console.log('‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á (Mock Data)');
    const mockData = generateMockSensorData();
    updateSensorDisplay(mockData);
    updateWifiStatus(false);
  }
}

// ========== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á ==========
function generateMockSensorData() {
  return {
    ph: (Math.random() * 2 + 5.5).toFixed(2), // 5.5-7.5
    ec: (Math.random() * 1.5 + 1.0).toFixed(2), // 1.0-2.5
    humidity: Math.round(Math.random() * 30 + 50), // 50-80
    waterTemp: (Math.random() * 8 + 18).toFixed(1), // 18-26
    light: Math.round(Math.random() * 40000 + 10000) // 10000-50000
  };
}

// ========== ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ==========
function updateSensorDisplay(data) {
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ pH
  if (data.ph !== undefined) {
    const phValueEl = document.getElementById('ph-value');
    const phStatusEl = document.getElementById('ph-status');
    if (phValueEl) {
      phValueEl.textContent = parseFloat(data.ph).toFixed(2);
    }
    if (phStatusEl) {
      phStatusEl.innerHTML = getPhStatus(parseFloat(data.ph));
    }
  }
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ EC
  if (data.ec !== undefined) {
    const ecValueEl = document.getElementById('ec-value');
    const ecStatusEl = document.getElementById('ec-status');
    if (ecValueEl) {
      ecValueEl.innerHTML = `${parseFloat(data.ec).toFixed(2)}<span class="sensor-unit">mS/cm</span>`;
    }
    if (ecStatusEl) {
      ecStatusEl.innerHTML = getEcStatus(parseFloat(data.ec));
    }
  }
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô
  if (data.humidity !== undefined) {
    const humidityValueEl = document.getElementById('humidity-value');
    const humidityStatusEl = document.getElementById('humidity-status');
    if (humidityValueEl) {
      humidityValueEl.innerHTML = `${Math.round(data.humidity)}<span class="sensor-unit">%</span>`;
    }
    if (humidityStatusEl) {
      humidityStatusEl.innerHTML = getHumidityStatus(data.humidity);
    }
  }
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ô‡πâ‡∏≥
  if (data.waterTemp !== undefined) {
    const waterTempValueEl = document.getElementById('water-temp-value');
    const waterTempStatusEl = document.getElementById('water-temp-status');
    if (waterTempValueEl) {
      waterTempValueEl.innerHTML = `${parseFloat(data.waterTemp).toFixed(1)}<span class="sensor-unit">¬∞C</span>`;
    }
    if (waterTempStatusEl) {
      waterTempStatusEl.innerHTML = getWaterTempStatus(parseFloat(data.waterTemp));
    }
  }
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á
  if (data.light !== undefined) {
    const lightValueEl = document.getElementById('light-value');
    const lightStatusEl = document.getElementById('light-status');
    if (lightValueEl) {
      lightValueEl.innerHTML = `${Math.round(data.light)}<span class="sensor-unit">lux</span>`;
    }
    if (lightStatusEl) {
      lightStatusEl.innerHTML = getLightStatus(data.light);
    }
  }
  
  console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ==========
function getPhStatus(ph) {
  if (ph < 5.5) return '‚ö†Ô∏è ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  if (ph > 7.5) return '‚ö†Ô∏è ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  return '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥';
}

function getEcStatus(ec) {
  if (ec < 1.2) return '‚ö†Ô∏è ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  if (ec > 2.5) return '‚ö†Ô∏è ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  return '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥';
}

function getHumidityStatus(humidity) {
  if (humidity < 50) return '‚ö†Ô∏è ‡πÅ‡∏´‡πâ‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  if (humidity > 80) return '‚ö†Ô∏è ‡∏ä‡∏∑‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  return '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥';
}

function getWaterTempStatus(temp) {
  if (temp < 18) return '‚ö†Ô∏è ‡πÄ‡∏¢‡πá‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  if (temp > 26) return '‚ö†Ô∏è ‡∏£‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  return '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥';
}

function getLightStatus(light) {
  if (light < 10000) return '‚ö†Ô∏è ‡πÅ‡∏™‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  if (light > 50000) return '‚ö†Ô∏è ‡πÅ‡∏™‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
  return '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥';
}

// ========== ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Garden Info ‡∏à‡∏≤‡∏Å Dropdown ==========
function handleLocationChange(event) {
  const value = event.target.value;
  
  const gardenNameEl = document.getElementById('garden-name-display');
  const gardenPlotEl = document.getElementById('garden-plot-id');
  const gardenAreaEl = document.getElementById('garden-area');
  
  if (!gardenNameEl || !gardenPlotEl || !gardenAreaEl) return;
  
  switch(value) {
    case 'bangkok':
      gardenNameEl.textContent = 'Spinach Garden 08';
      gardenPlotEl.textContent = 'PL-024';
      gardenAreaEl.textContent = '200 m¬≤';
      break;
    case 'weilburg':
      gardenNameEl.textContent = 'Weilburg Farm';
      gardenPlotEl.textContent = 'WB-001';
      gardenAreaEl.textContent = '350 m¬≤';
      break;
    case 'farm_a':
      gardenNameEl.textContent = 'Farm A Chiangmai';
      gardenPlotEl.textContent = 'CM-A12';
      gardenAreaEl.textContent = '500 m¬≤';
      break;
  }
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πâ‡∏≠‡∏á ==========
async function initCamera() {
  const cameraPreview = document.querySelector('.camera-preview');
  if (!cameraPreview) return;

  try {
    // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
    cameraStream = await navigator.mediaDevices.getUserMedia({ 
      video: { 
        facingMode: 'environment', // ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á
        width: { ideal: 640 },
        height: { ideal: 480 }
      } 
    });
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á video element
    let videoEl = cameraPreview.querySelector('video');
    if (!videoEl) {
      videoEl = document.createElement('video');
      videoEl.autoplay = true;
      videoEl.playsInline = true;
      videoEl.style.width = '100%';
      videoEl.style.height = '100%';
      videoEl.style.objectFit = 'cover';
      cameraPreview.innerHTML = '';
      cameraPreview.appendChild(videoEl);
    }
    
    videoEl.srcObject = cameraStream;
    isCameraActive = true;
    
    console.log('‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
  } catch (error) {
    console.error('Camera error:', error);
    cameraPreview.innerHTML = 'üì∑<br><small>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ</small>';
    alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå');
  }
}

function stopCamera() {
  if (cameraStream) {
    cameraStream.getTracks().forEach(track => track.stop());
    cameraStream = null;
    isCameraActive = false;
    
    const cameraPreview = document.querySelector('.camera-preview');
    if (cameraPreview) {
      cameraPreview.innerHTML = 'üé•';
    }
    
    console.log('‚è∏Ô∏è ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á');
  }
}

function capturePhoto() {
  const cameraPreview = document.querySelector('.camera-preview');
  const videoEl = cameraPreview?.querySelector('video');
  
  if (!videoEl || !isCameraActive) {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô');
    return;
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á canvas ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û
  const canvas = document.createElement('canvas');
  canvas.width = videoEl.videoWidth;
  canvas.height = videoEl.videoHeight;
  
  const ctx = canvas.getContext('2d');
  ctx.drawImage(videoEl, 0, 0);
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô image ‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
  canvas.toBlob((blob) => {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `garden_photo_${Date.now()}.jpg`;
    a.click();
    URL.revokeObjectURL(url);
    
    // ‡πÅ‡∏™‡∏î‡∏á flash effect
    const flash = document.createElement('div');
    flash.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: white;
      z-index: 9999;
      animation: flash 0.3s;
    `;
    document.body.appendChild(flash);
    
    setTimeout(() => flash.remove(), 300);
    
    console.log('üì∏ ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  }, 'image/jpeg', 0.95);
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS animation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö flash
const style = document.createElement('style');
style.textContent = `
  @keyframes flash {
    0% { opacity: 0; }
    50% { opacity: 1; }
    100% { opacity: 0; }
  }
`;
document.head.appendChild(style);

// ========== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Camera Controls ==========
function setupCameraControls() {
  const cameraButtons = document.querySelectorAll('.camera-btn');
  if (cameraButtons.length === 0) return;
  
  cameraButtons.forEach((btn, index) => {
    btn.addEventListener('click', () => {
      switch(index) {
        case 0: // ‡∏õ‡∏∏‡πà‡∏°‡∏ã‡πâ‡∏≤‡∏¢ - Toggle ‡∏Å‡∏•‡πâ‡∏≠‡∏á
          if (isCameraActive) {
            stopCamera();
          } else {
            initCamera();
          }
          break;
        case 1: // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏≤‡∏á - ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ
          capturePhoto();
          break;
        case 2: // ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô - Refresh
          if (isCameraActive) {
            stopCamera();
            setTimeout(() => initCamera(), 500);
          }
          break;
        case 3: // ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏ß‡∏≤ - ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
          if (!isCameraActive) {
            initCamera();
          }
          break;
      }
    });
  });
}

// ========== ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ==========
function loadLastLocation() {
  try {
    const saved = localStorage.getItem('lastLocation');
    if (saved) {
      const location = JSON.parse(saved);
      console.log('üìç ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:', location);
      return location;
    }
  } catch (error) {
    console.error('Error loading last location:', error);
  }
  
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Bangkok)
  return {
    lat: 13.7563,
    lon: 100.5018
  };
}

function saveLastLocation(lat, lon) {
  try {
    const location = { lat, lon };
    localStorage.setItem('lastLocation', JSON.stringify(location));
    console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:', location);
  } catch (error) {
    console.error('Error saving last location:', error);
  }
}

// ========== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ==========
function init() {
  console.log('üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö I-HYDRO SMART...');
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  updateDateTime();
  setInterval(updateDateTime, 1000);
  
  // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  currentLocation = loadLastLocation();
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ)
  fetchWeatherData();
  
  // ‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏Å‡πà‡∏≤)
  requestGeolocation();
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  fetchSensorData();
  
  // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  weatherUpdateInterval = setInterval(fetchWeatherData, 60000); // ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
  sensorUpdateInterval = setInterval(fetchSensorData, FETCH_INTERVAL); // ‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  setInterval(requestGeolocation, 300000); // ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  
  // Event Listeners
  const gardenLocationSelect = document.getElementById('garden-location');
  
  if (gardenLocationSelect) {
    gardenLocationSelect.addEventListener('change', handleLocationChange);
  }
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Camera Controls
  setupCameraControls();
  
  console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}

// ========== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ==========
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', init);
} else {
  init();
}

// ========== ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ==========
window.addEventListener('beforeunload', () => {
  if (weatherUpdateInterval) clearInterval(weatherUpdateInterval);
  if (sensorUpdateInterval) clearInterval(sensorUpdateInterval);
  if (cameraStream) stopCamera();
});

// ========== Export functions for global access ==========
window.iHydro = {
  updateDateTime,
  updateWifiStatus,
  fetchWeatherData,
  fetchSensorData,
  requestGeolocation,
  initCamera,
  stopCamera,
  capturePhoto,
  handleLocationChange
};